#!/usr/bin/env bash
## BP010: Release metadata
## @build_type: bin
## @build_date: 2023-11-14T16:20:06Z
set -e
extern() {
  extern=$1
}
legacy() {
  legacy=$1
}
module() {
  module=$1
}
public() {
  public=$1
}
use() {
  use=$1
}
embed() {
  embed=$1
}
## BP004: Compile the entrypoint

module cmdlint
module error
module util
module validator

usage() {
  echo "====[ THE COMMAND LINTER ]===="
  echo "Conduct multiple checks on the output"
  echo "of the COMMAND in typical shell use cases."
  echo
  echo "Usage:   cmdlint [OPTION] [COMMAND]"
  echo
  echo "Options:"
  echo "  --ignore RULE_LIST    Ignore rules from the list (eg. R001,R002)"
  echo "  --help                Display this help message"
  exit
}

main() {
  local command
  local ignore_rules

  [ -z "$1" ] && usage
  [ $# -eq 0 ] && usage
  [ "$1" = "--help" ] && usage
  if [ "$1" = "--ignore" ]; then
    ignore_rules=$2
    shift 2
  fi

  command="$1"

  echo "--------------------------------------------------------------"
  echo " Analyzing: ${command}"
  echo "  Ignoring: ${ignore_rules}"

  cmdlint "${command}" "${ignore_rules}" && true

  if [ $? -eq 1 ]; then
    echo "--------------------------------------------------------------"
    echo " FAIL | Result: Exit with analysis problems!"
    echo "--------------------------------------------------------------"
    exit 1
  fi

  echo "    Result: OK!"
  echo "--------------------------------------------------------------"
}

module rules

cmdlint() {
  local command
  local ignore_rules
  local exit_code

  command=$1
  ignore_rules=$2
  exit_code=0

  cmdlint_rule_00x "${command}" "${ignore_rules}" || exit_code=$?

  cmdlint_rule_01x "${command}" "${ignore_rules}" || exit_code=$?

  cmdlint_rule_02x "${command}" "${ignore_rules}" || exit_code=$?

  return ${exit_code}
}

public rule_00x
public rule_01x
public rule_02x

cmdlint_rule_00x() {
  local command
  local exit_code

  command=$1
  exit_code=0

  if ! command -v "${command}" >/dev/null 2>&1; then
    raise_error R000 "${command}" "Missing '${command}' on the system"
    exit_code=1
  fi

  return ${exit_code}
}

cmdlint_rule_01x() {
  local command
  local ignore_rules
  local output
  local usage_line
  local first_word
  local first_word_offset
  local exit_code

  command="$1"
  ignore_rules="$2"
  exit_code=0

  output=$(capture_output "${command}")

  if is_output_a_usage_message "${output}.out"; then
    if [ "${ignore_rules/R011/}" = "${ignore_rules}" ]; then
      if ! grep "'--help'" "${output}.out" >/dev/null 2>&1; then
        raise_error R011 "${command}" "Missing '--help' on usage message"
        exit_code=1
      fi
    fi
    if grep "^Usage:" "${output}.out" >/dev/null 2>&1; then
      IFS=$'\n'
      for usage_line in $(extract_usage_lines "${output}.out"); do
        if [ "${ignore_rules/R012/}" = "${ignore_rules}" ]; then
          if ! echo "${usage_line}" | grep -q "^$command"; then
            raise_error R012 "${command}" "Usage line does not start with '${command}'"
            first_word=$(echo "${usage_line}" | awk '{print $1}')
            first_word_prefix=${usage_line%%$first_word*}
            highlight_line "Usage:\n${usage_line}" "${first_word_prefix}" "${first_word}" "Replace '${first_word}' with '${command}'"
            exit_code=1
          fi
        fi
        if [ "${ignore_rules/R013/}" = "${ignore_rules}" ]; then
          first_word=$(echo "${usage_line}" | awk '{print $1}')
          first_word_prefix=${usage_line%%$first_word*}
          if [ "${#first_word_prefix}" -ne 2 ]; then
            raise_error R013 "${command}" "Usage line does not start with 2 spaces"
            highlight_line "Usage:\n${usage_line}" "" "${first_word_prefix}" "Replace ${#first_word_prefix} beginning spaces with 2 spaces"
            exit_code=1
          fi
        fi
      done
    fi

  fi

  return ${exit_code}
}

cmdlint_rule_02x() {
  local command
  local output
  local exit_code
  local subcommand
  local ignore_rules

  command="$1"
  ignore_rules="$2"
  exit_code=0

  output=$(capture_output "${command}")

  if is_output_a_usage_message "${output}.out"; then

    if has_output_subcommands "${output}.out"; then
      IFS=$'\n'
      for subcommand in $(extract_subcommands "${output}.out"); do
        cmdlint_rule_01x "${command} ${subcommand}" "${ignore_rules}" || exit_code=$?
      done
    fi
  fi

  return ${exit_code}
}

raise_error() {
    echo "--------------------------------------------------------------"
    echo " $1 | Command: $2"
    echo "      |   Error: $3"
}

highlight_line() {
    local line

    line=$1
    line_prefix=$2
    line_highlight=$(echo "$3" | sed 's/./^/g')
    line_message=$4

    echo ""
    echo -e "$line"
    echo "${line_prefix}${line_highlight} ${line_message}"
    echo ""
}

capture_output() {
  local command
  local tmp_file

  command=$1
  tmp_file=$(mktemp -u)

  eval "${command}" > "${tmp_file}.out" 2> "${tmp_file}.err" || true

  echo "${tmp_file}"
}

extract_subcommands() {
  local output_file
  local capture_subcommands
  local subcommand

  output_file=$1

  while IFS=$'\n' read -r line; do
    [ -z "${line// }" ] && continue
    if [ "${line}" = "Commands:" ]; then
      capture_subcommands=true
    elif [ "${capture_subcommands}" = true ]; then
      if echo "${line}" | grep -q "^[[:space:]]"; then
        subcommand=$(echo "${line}" | awk '{print $1}')
        echo "${subcommand}"
      else
        capture_subcommands=false
      fi
    fi
  done < "${output_file}"
}

extract_usage_lines() {
  local output_file
  local capture_usage_lines
  local usage_line

  output_file=$1

  while IFS=$'\n' read -r line; do
    [ -z "${line// }" ] && continue
    if [ "${line}" = "Usage:" ]; then
      capture_usage_lines=true
    elif [ "${capture_usage_lines}" = true ]; then
      if echo "${line}" | grep -q "^[[:space:]]"; then
        echo "${line}"
      else
        capture_usage_lines=false
      fi
    fi
  done < "${output_file}"
}
is_output_a_usage_message() {
    local output_file

    output_file=$1

    if grep 'Options:' "${output_file}" > /dev/null 2>&1; then
        return 0
    fi

    return 1
}

has_output_subcommands() {
    local output_file

    output_file=$1

    if grep 'Commands:' "${output_file}" > /dev/null 2>&1; then
        return 0
    fi

    return 1
}
## BP005: Execute the entrypoint
main "$@"
